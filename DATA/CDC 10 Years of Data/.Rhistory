#1
install.packages("mosaicData") #instaled package mosaicData
library(mosaicData) #accessed the library mosaicData
#2
# set my variable equal to a data frame from mosaicData
myData1 = births
#2
# set my variable equal to a data frame from mosaicData
myData1 = births
#3
class(myData1) # tells me the data type of my variable
dim.data.frame(myData) # tells me the dimention of my variable/data frame
sapply(myData, class) # tells me the data type of each column in myData
summary.data.frame(myData) # used this action to find the mean of each column
#4 a.) There are 20 unique values in column year
sapply(myData, function(x) length(unique(x)))
# ^ used to find how many unique values there are in each of the columns
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
#      concluded there is a leap year.
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
#      concluded there is a leap year.
#      another way to find it is to check the unique values of the column against 366 and if
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
#      concluded there is a leap year.
#      another way to find it is to check the unique values of the column against 366 and if
#      the answer returns false then it isnt a leap year
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
install.packages("mosaicData") #instaled package mosaicData
library(mosaicData) #accessed the library mosaicData
myData1 = births
class(myData1)
print(class(myData1))
install.packages("mosaicData")
install.packages("mosaicData")
library("mosaicData", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
myData1 = births
print(class(myData1))
#1
install.packages("mosaicData") #instaled package mosaicData
install.packages("mosaicData")
library(mosaicData) #accessed the library mosaicData
#2
# set my variable equal to a data frame from mosaicData
myData1 = births
#3
class(myData1) # tells me the data type of my variable
dim.data.frame(myData) # tells me the dimention of my variable/data frame
sapply(myData, class) # tells me the data type of each column in myData
summary.data.frame(myData) # used this action to find the mean of each column
#4 a.) There are 20 unique values in column year
sapply(myData, function(x) length(unique(x)))
# ^ used to find how many unique values there are in each of the columns
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#2
# set my variable equal to a data frame from mosaicData
myData <- births
#2
# set my variable equal to a data frame from mosaicData
myData <- Births
#2
# set my variable equal to a data frame from mosaicData
myData = Births
#3
class(myData) # tells me the data type of my variable
dim.data.frame(myData) # tells me the dimention of my variable/data frame
sapply(myData, class) # tells me the data type of each column in myData
summary.data.frame(myData) # used this action to find the mean of each column
#4 a.) There are 20 unique values in column year
sapply(myData, function(x) length(unique(x)))
# ^ used to find how many unique values there are in each of the columns
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
#      concluded there is a leap year.
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
#      concluded there is a leap year.
#      another way to find it is to check the unique values of the column against 366 and if
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
#      concluded there is a leap year.
#      another way to find it is to check the unique values of the column against 366 and if
#      the answer returns false then it isnt a leap year
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
#7 The pace of the class so far has been perfect.
print(Births)
mosaicData::Births
d = read.table("/Users/noahferrel/Desktop/Travel.txt", header = T)
quantile(as.numeric(as.character(d$orig_destination_distance)),na.rm = T)
max(na.omit(as.numeric(as.character(d$orig_destination_distance))))
print(d)
class(d)
summary.data.frame(d)
c = quantile(as.numeric(as.character(d$orig_destination_distance)),na.rm = T)
class(c)
head(d)
head(d)
head(v1)
v1 = (d$orig_destination_distance)
quantile(as.numeric(as.character(d$orig_destination_distance)),na.rm = T)
head(v1)
View(d)
ew rows
v1 = (d$orig_destination_distance)
v2 = as.numeric(v1)
head(v2)
v1 = (d$orig_destination_distance)
v2 = as.numeric(as.character(v1))
head(v2)
#what is the mean of v2
na.omit(v2)
head(v2)
#what is the mean of v2
v3 = na.omit(v2)
mean(v3)
v1 = (d$orig_destination_distance)
v2 = as.numeric(as.character(v1)) # changes to a character then into a numeric
#what is the mean of v2
v3 = na.omit(v2) #takes out the na
meanOfV3 = mean(v3)
meanOfV3
str(d)
d2$orig_destination_distance
d2 = d
d2$orig_destination_distance
head(d2)
head(d2$orig_destination_distance)
summary(d2$is_booking)
summary(as.factor(d2$is_booking))
sum(d2$is_booking)
head(d)
print(d)
class(d)
summary.data.frame(d)
?cut
?cut()
cut(v2, c(0,100,1000,Inf) #
quantile(as.numeric(as.character(d$orig_destination_distance)),na.rm = T)
dist_catagory = cut(v2, c(0,100,1000,Inf), labels = c("short", "medium", "large"))
head(dist_catagory)
dist_catagory = cut(v2, c(0,100,1000,Inf), labels = c("short", "medium", "long"))
summary(dist_catagory)
sum(summary(dist_catagory))
which(dist_catagory=="long")
which(dist_catagory="long")
which(dist_catagory== long)
dist_catagory=="long"[Ind]
dist_catagory=="long"[Ind]
dist_catagory=="long"[ind]
ind = which(dist_catagory=="long")
dist_catagory=="long"[ind]
ind
#4 a.) There are 20 unique values in column year
sapply(myData, function(x) length(unique(x)))
myData(date([1:Inf]))
# ^ used to find how many unique values there are in each of the columns
#  b.) myData does include leap years because in column day_of_year there are 366 unique values
#      I found the answer by checking how many unique values there are day_of_year, if there
#      were only 365 then there would not of been a leap year, but since there were 366 I
#      concluded there is a leap year.
#      another way to find it is to check the unique values of the column against 366 and if
#      the answer returns false then it isnt a leap year
# feb 29
#as.POSIXlt(myData$date[]) # in class example
substr(myData$date[1],3.7)
lappy(myData$date, function(x), substr(x,6,10)=="02-29")
sappy(myData$date, function(x), substr(x,6,10)=="02-29")
sappy(myData$date, function(x) substr(x,6,10)=="02-29")
sapply(myData$date, function(x) substr(x,6,10)=="02-29")
sapply(myData$date, function(x) substr(x,6,10)=="02-29")
which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
#  c.)
setNoFeb29 = subset(mydata, "02-29")
#  c.)
setNoFeb29 = subset(myData, "02-29")
summary.data.frame(myData) # used this action to find the mean of each column
View(myData)
noFeb29 = sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
#  c.)
#setNoFeb29 = subset(myData, "02-29")
noFeb29 = sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
#  c.)
#setNoFeb29 = subset(myData, "02-29")
noFeb29 = sapply(myData$date, function(x) substr(x,6,10)=="02-29")
noFeb29
#  c.)
#setNoFeb29 = subset(myData, "02-29")
noFeb29 = which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
noFeb29
subset.data.frame(myData, c(noFeb29))
subset.data.frame(myData, which(noFeb29))
cut(myData, c(noFeb29))
cut(myData, c(as.numeric(noFeb29))
cut(myData, c(as.numeric(noFeb29)))
#  c.)
#setNoFeb29 = subset(myData, "02-29")
#noFeb29 = which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
EPL2011_12FirstHalf = subset(myData$date, Date2 > as.Date(substr(x,6,10)=="02-29") )
#  c.)
#setNoFeb29 = subset(myData, "02-29")
#noFeb29 = which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
myData$date <- as.Date(myData$date)
with(myData, myData[(date >= "2008-01-02" & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date >= "1969-01-02" & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date >= "1969-01-03" & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date !="1969-01-03"  & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date != "1969-02-29"  & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date != "1969-02-28"  & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date != "1970-02-29"  & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date != "02-29"  & date <= "2008-01-05") |
(date >= "2008-01-09" & date <= "2008-01-11"), ])
with(myData, myData[(date != sapply(myData$date, function(x) substr(x,6,10)=="02-29"))])
# ^ used to find how many unique values there are in each of the columns
which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
myData[1155,2616,4077,5538,6999]
#  c.)
#setNoFeb29 = subset(myData, "02-29")
#noFeb29 = which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
myData[1155,2616,4077,5538,6999]
#  c.)
#setNoFeb29 = subset(myData, "02-29")
#noFeb29 = which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
newInfo = c(myData,1155,2616,4077,5538,6999)
newInfo
selectByDate(myData, month = 2, day = 28)
newinfo = selectByDate(myData, month = 2, day = 28)
#1
install.packages("openair")
yes
newinfo = selectByDate(myData, month = 2, day = 28)
#1
install.packages("openair")
newinfo = selectByDate(myData, month = 2, day = 28)
library(openair)
myData$date <- as.Date(myData$date)
newinfo = selectByDate(myData, month = 2, day = 28)
myData[myData$Date != "1970-01-01",]
myData[myData$Date != "1969-01-01",]
# ^ used to find how many unique values there are in each of the columns
which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
#  c.)
noFeb29 = myData[-c(1155), -c(2616), -c(4077), -c(5538), -c(6999)]
#  c.)
noFeb29 = myData[-c(,1155), -c(,2616), -c(,4077), -c(,5538), -c(,6999)]
#  c.)
noFeb29 = myData[-c(1155,), -c(2616,), -c(4077,), -c(5538,), -c(6999,)]
#  c.)
noFeb29 = myData[which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))]
#  c.)
noFeb29 = myData[which(sapply(myData, function(x) substr(x,6,10)=="02-29"))]
sapply(myData$date, function(x) substr(x,6,10)=="02-29")
#  c.)
noFeb29 = myData[which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))
#  c.)
noFeb29 = myData[which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))]
noFeb29 = myData[which(sapply(myData$date, function(x) substr(x,6,10)=="02-29"))]
noFeb29 = myData[which(sapply(myData$date, function(x) substr(x,6,10)=="02-29")),]
noFeb29
noFeb29 = myData[-which(sapply(myData$date, function(x) substr(x,6,10)=="02-29")),]
noFeb29
sapply(noFeb29, function(x) length(unique(x)))
#4 a.) There are 20 unique values in column year
sapply(myData, function(x) length(unique(x)))
#5
topBirths =
#5
topBirths =
print(mylist)
mylist <- list(3,1:10,matrix(1:9,3))
names(mylist) = c("ye","yo","yup")
print(mylist)
mydf[,2]
# [[x]] search for whatever "x"
mydf = as.data.frame(MM)
mydf$v2
mydf[,2]
twoColumn =  myData[c(1:2)]
twoColumn
topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(x),10))),]]
topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(x),10))),]
tail(sort(x),10)
tail(sort(twoColumn$births),10)
topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
topBirths = twoColumn[which(tail(sort(twoColumn$births),10))]
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
topBirths = twoColumn[(tail(sort(twoColumn$births),10))]
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
topBirths = twoColumn[(tail(sort(twoColumn$births),10)),]
topBirths
tail(sort(twoColumn$births),10)
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
#topBirths = twoColumn[(tail(sort(twoColumn$births),10)),]
topBirths= twoColumn[order(twoColumn$births)]
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
#topBirths = twoColumn[(tail(sort(twoColumn$births),10)),]
topBirths= twoColumn[order(twoColumn$births),]
topBirths
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
#topBirths = twoColumn[(tail(sort(twoColumn$births),10)),]
topBirths= twoColumn[-order(twoColumn$births),]
topBirths
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
#topBirths = twoColumn[(tail(sort(twoColumn$births),10)),]
topBirths= twoColumn[sort(twoColumn$births),]
topBirths
topBirths
#topBirths = twoColumn[which(sapply(twoColumn$births, function(x) tail(sort(twoColumn$births),10))),]
#topBirths = twoColumn[(tail(sort(twoColumn$births),10)),]
topBirths= twoColumn[order(twoColumn$births),]
topBirths
topBirths= twoColumn[order(twoColumn$births),]
tail(sort(topBirths),10)
tail(sort(topBirths),10,)
topBirths= twoColumn[order(twoColumn$births), , decreasing = FALSE ]
topBirths= twoColumn[order(twoColumn$births), decreasing = FALSE ]
topBirths= twoColumn[decreasing = FALSE , order(twoColumn$births),]
topBirths= twoColumn[order(twoColumn$births),]
topBirths= twoColumn[order(twoColumn$births), partial = NULL, decreasing = FALSE]
topBirths= twoColumn[order(twoColumn$births,decreasing = FALSE), ]
topBirths
topBirths= twoColumn[order(twoColumn$births,decreasing = TRUE), ]
topBirths
topTenBirths = topTenBirths[c(1:10),]
topTenBirths = topBirths[c(1:10),]
topTenBirths
birth_rate = cut(v1, c(0,8000,10000,Inf), labels = c("low", "med", "hight"))
as.v1
v2 = as.numeric(v1)
birth_rate = cut(v2, c(0,8000,10000,Inf), labels = c("low", "med", "hight"))
myData2 = add_column(myData, birth_rate = 1:Inf)
colnames(myData) = c(1:Inf)
colnames(myData) = c(1:length(myData))
myData
#2
# set my variable equal to a data frame from mosaicData
myData = Births
myData
myData$birth_rate = c(1:10000)
myData$birth_rate = c(1:7305)
myData
myData2= cut(myData, c(0,8000,10000,Inf), labels = c("low", "med", "hight"))
dist_catagory = cut(v2, c(0,100,1000,Inf), labels = c("short", "medium", "long"))
myData2= cut(myData$birth_rate, c(0,8000,10000,Inf), labels = c("low", "med", "hight"))
myData2
birth_rate = cut(myData$births, c(0,8000,10000,Inf), labels = c("low", "med", "hight"))
birth_rate
myData$birth_rate = birth_rate
myData$birth_rate
myData
lappy(myData$birth_rate, function(x) "low" == "low")
lapply(myData$birth_rate, function(x) "low" == "low")
dist_catagory = cut(v2, c(0,100,1000,Inf), labels = c("short", "medium", "long"))
ind = which(dist_catagory=="long")
#which(dist_catagory=="long")
quantile(as.numeric(as.character(d$orig_destination_distance)),na.rm = T)
ind
lapply(myData$birth_rate, function(x) x == "low")
birth_rate = cut(myData$births, c(0,8000,10000,Inf), labels = c("low", "med", "high"))
myData$birth_rate = birth_rate
lapply(myData$birth_rate, function(x) x == "low")
list = list( low = myData[which(lapply(myData$birth_rate, function(x) x == "low"))],
high = myData[which(lapply(myData$birth_rate, function(x) x == "high"))]
list = list( low = myData[which(lapply(myData$birth_rate, function(x) x == "low"))],
med = myData[which(lapply(myData$birth_rate, function(x) x == "med"))],
high = myData[which(lapply(myData$birth_rate, function(x) x == "high"))])
list = list( low = myData[which(lapply(myData$birth_rate, function(x) x == "low"))],
med = myData[which(lapply(myData$birth_rate, function(x) x == "med"))],
high = myData[which(lapply(myData$birth_rate, function(x) x == "high"))])
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low"))],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med"))],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high"))])
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low"))],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med"))],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high"))], )
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low"),)],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med"),)],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high"),)] )
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low"),)],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med"),)],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high"),)])
sapply(myData$birth_rate, function(x) x == "low")
lapply(myData$birth_rate, function(x) x == "low")
which(sapply(myData$birth_rate, function(x) x == "low"))
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low"),)],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med"),)],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high"),)])
list = list( low = myData[which(sapply(myData$birth_rate,  x == "low"),)],
med = myData[which(sapply(myData$birth_rate,  x == "med"),)],
high = myData[which(sapply(myData$birth_rate,  x == "high"),)])
list = list( low = as.data.frame(myData[which(sapply(myData$birth_rate, function(x) x == "low"),)]),
med = as.data.frame(myData[which(sapply(myData$birth_rate, function(x) x == "med"),)]),
high = as.data.frame(myData[which(sapply(myData$birth_rate, function(x) x == "high"),)]))
low = as.data.frame(myData[which(sapply(myData$birth_rate, function(x) x == "low"),)])
which(sapply(myData$birth_rate, function(x) x == "low"))
new = myData[which(sapply(myData$birth_rate, function(x) x == "low")),]
new
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low")),],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med")),],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high")),])
list
birth_rate = cut(myData$births, c(0,8000,10000,Inf), labels = c("low", "med", "high"))
myData$birth_rate = birth_rate
lapply(myData$birth_rate, function(x) x == "low")
which(sapply(myData$birth_rate, function(x) x == "low"))
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low")),],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med")),],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high")),])
myData$birth_rate = birth_rate
list = list( low = myData[which(sapply(myData$birth_rate, function(x) x == "low")),],
med = myData[which(sapply(myData$birth_rate, function(x) x == "med")),],
high = myData[which(sapply(myData$birth_rate, function(x) x == "high")),])
list
list = list( low = myData[which(lapply(myData$birth_rate, function(x) x == "low")),],
med = myData[which(lapply(myData$birth_rate, function(x) x == "med")),],
high = myData[which(lapply(myData$birth_rate, function(x) x == "high")),])
lapply(myData$birth_rate, function(x) x == "low")
birth_rate = cut(myData$births, c(0,8000,10000,Inf), labels = c("low", "med", "high"))
birth_rate
# c.)
lapply(myData$birth_rate, function(x) x == "low")
#2
# set my variable equal to a data frame from mosaicData
myData = Births
choose(45,0)
choose(42,42)
1/(choose(49,6))
choose(48,5)/choose(49,6)
rm(list = ls()) # removes all variables in r
rm(list = ls()) # removes all variables in r
library("plyr")
setwd("/Users/noahferrel/Desktop/")
read.csv("OpioidCodesOnly.csv", header = T)
load("RFV_codes.RDA")
load("ICD9_codes.RDA")
setwd("/Users/noahferrel/Desktop/Fall 2018/Math 370-R/CDC 10 Years of Data")
file_names = list.files()
E = lapply(file_names, function(x) read.csv(x, header = T)) #reads in the 10 data.frames into a list
e = E
w = list(
E.DRUGID_cols = lapply(E,function(x) names(x)[grep("DRUGID", names(x))]),
E.CONTR_cols  = lapply(E,function(x) names(x)[grep("CONTSUB", names(x))]),
E.DIAG_cols   = lapply(1:10,function(x) if(x<=8){c("DIAG1","DIAG2","DIAG3")}else{c("DIAG1","DIAG2","DIAG3","DIAG4","DIAG5")} ),
E.RFV_cols    = lapply(1:10,function(x) if(x<=8){c("RFV1","RFV2","RFV3")}else{c("RFV1","RFV2","RFV3","RFV4","RFV5")} )
)
combine_columns = function(df_L,col_L){
sub_df_L = mapply(function(x,y) x[,y] ,df_L,col_L )
new_df = do.call(rbind.fill,sub_df_L)
return(new_df)
}
newDF = lapply(w,function(x) combine_columns(e,x) )
#do.call(merge ,c(test,all=T))
#as.data.frame(lapply(w,function(x) combine_columns(e,x) ))
whitespace2NA = function(vec){
vec =  as.character(vec)
vec[trimws(vec)==""] = NA
return(vec)
}
newDF = as.data.frame(lapply(newDF,function(x)   whitespace2NA(x) ))
View(E)
View(newDF)
View(E)
newDF = do.call(cbind,lapply(w, function(x) combine_columns(e,x)))
